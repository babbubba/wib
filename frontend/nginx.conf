server {
  listen 80;
  server_name _;

  root /usr/share/nginx/html;
  index index.html;

  # Proxy API calls to central proxy service (via host to avoid DNS races)
  location /receipts {
    proxy_pass http://host.docker.internal:8085/receipts;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header Authorization $http_authorization;
  }

  location /analytics {
    proxy_pass http://host.docker.internal:8085/analytics;
    proxy_set_header Host $host;
    proxy_set_header Authorization $http_authorization;
  }

  location /auth {
    proxy_pass http://host.docker.internal:8085/auth;
  }

  location /ml {
    proxy_pass http://host.docker.internal:8085/ml;
    proxy_set_header Authorization $http_authorization;
  }

  location /ocr {
    proxy_pass http://host.docker.internal:8085/ocr;
  }

  location /kie {
    proxy_pass http://host.docker.internal:8085/kie;
  }

  # SPA route '/queue' must render index.html; proxy only API subpaths
  location = /queue {
    try_files $uri /index.html;
  }
  location ^~ /queue/ {
    proxy_pass http://host.docker.internal:8085/queue/;
    proxy_set_header Authorization $http_authorization;
  }

  # SPA routes (exact) should render index.html on reload
  location = /dashboard { try_files $uri /index.html; }
  location = /login { try_files $uri /index.html; }

  location /storage {
    proxy_pass http://host.docker.internal:8085/storage;
    proxy_set_header Authorization $http_authorization;
  }
  location /storage/object {
    proxy_pass http://host.docker.internal:8085/storage/object;
    proxy_set_header Authorization $http_authorization;
  }

  # Categories API (proxy both exact and subpaths)
  location = /categories {
    proxy_pass http://api:8080/categories;
    proxy_set_header Authorization $http_authorization;
  }
  location ^~ /categories/ {
    proxy_pass http://api:8080/categories/;
    proxy_set_header Authorization $http_authorization;
  }

  # Stores API
  location = /stores {
    proxy_pass http://api:8080/stores;
    proxy_set_header Authorization $http_authorization;
  }
  location ^~ /stores/ {
    proxy_pass http://api:8080/stores/;
    proxy_set_header Authorization $http_authorization;
  }

  location / {
    try_files $uri $uri/ /index.html;
    add_header Cache-Control "no-store";
  }

  # Cache static assets aggressively (optional)
  location ~* \.(?:js|css|png|jpg|jpeg|gif|svg|ico)$ {
    try_files $uri =404;
    expires 30d;
    add_header Cache-Control "public, max-age=2592000";
  }
}

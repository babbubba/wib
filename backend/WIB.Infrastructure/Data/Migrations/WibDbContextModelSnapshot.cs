// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WIB.Infrastructure.Data;

#nullable disable

namespace WIB.Infrastructure.Migrations
{
    [DbContext(typeof(WibDbContext))]
    partial class WibDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WIB.Domain.BudgetMonth", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("LimitAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<int>("Month")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("BudgetMonths");
                });

            modelBuilder.Entity("WIB.Domain.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("WIB.Domain.ExpenseAggregate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<int>("Month")
                        .HasColumnType("integer");

                    b.Property<Guid?>("StoreId")
                        .HasColumnType("uuid");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ExpenseAggregates");
                });

            modelBuilder.Entity("WIB.Domain.LabelingEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Confidence")
                        .HasPrecision(3, 2)
                        .HasColumnType("numeric(3,2)");

                    b.Property<Guid?>("FinalCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FinalTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("LabelRaw")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("PredictedCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PredictedTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("WhenUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("LabelingEvents");
                });

            modelBuilder.Entity("WIB.Domain.PriceHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("PricePerKg")
                        .HasPrecision(10, 3)
                        .HasColumnType("numeric(10,3)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(10, 3)
                        .HasColumnType("numeric(10,3)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("StoreId");

                    b.ToTable("PriceHistories");
                });

            modelBuilder.Entity("WIB.Domain.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Brand")
                        .HasColumnType("text");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("GTIN")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProductTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("WIB.Domain.ProductAlias", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAliases");
                });

            modelBuilder.Entity("WIB.Domain.ProductType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AliasesJson")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("WIB.Domain.Receipt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImageObjectKey")
                        .HasColumnType("text");

                    b.Property<int?>("OcrStoreH")
                        .HasColumnType("integer");

                    b.Property<int?>("OcrStoreW")
                        .HasColumnType("integer");

                    b.Property<int?>("OcrStoreX")
                        .HasColumnType("integer");

                    b.Property<int?>("OcrStoreY")
                        .HasColumnType("integer");

                    b.Property<string>("RawText")
                        .HasColumnType("text");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("StoreLocationId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("TaxTotal")
                        .HasPrecision(10, 3)
                        .HasColumnType("numeric(10,3)");

                    b.Property<decimal>("Total")
                        .HasPrecision(10, 3)
                        .HasColumnType("numeric(10,3)");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.HasIndex("StoreLocationId");

                    b.ToTable("Receipts");
                });

            modelBuilder.Entity("WIB.Domain.ReceiptLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("LabelRaw")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("LineTotal")
                        .HasPrecision(10, 3)
                        .HasColumnType("numeric(10,3)");

                    b.Property<int?>("OcrH")
                        .HasColumnType("integer");

                    b.Property<int?>("OcrW")
                        .HasColumnType("integer");

                    b.Property<int?>("OcrX")
                        .HasColumnType("integer");

                    b.Property<int?>("OcrY")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PredictedCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PredictedTypeId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("PredictionConfidence")
                        .HasPrecision(3, 2)
                        .HasColumnType("numeric(3,2)");

                    b.Property<decimal?>("PricePerKg")
                        .HasPrecision(10, 3)
                        .HasColumnType("numeric(10,3)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Qty")
                        .HasPrecision(10, 3)
                        .HasColumnType("numeric(10,3)");

                    b.Property<Guid>("ReceiptId")
                        .HasColumnType("uuid");

                    b.Property<int>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(10, 3)
                        .HasColumnType("numeric(10,3)");

                    b.Property<decimal?>("VatRate")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)");

                    b.Property<decimal?>("WeightKg")
                        .HasPrecision(10, 3)
                        .HasColumnType("numeric(10,3)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ReceiptId");

                    b.ToTable("ReceiptLines");
                });

            modelBuilder.Entity("WIB.Domain.Store", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Chain")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("WIB.Domain.StoreLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uuid");

                    b.Property<string>("VatNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("StoreLocations");
                });

            modelBuilder.Entity("WIB.Domain.Category", b =>
                {
                    b.HasOne("WIB.Domain.Category", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("WIB.Domain.LabelingEvent", b =>
                {
                    b.HasOne("WIB.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WIB.Domain.PriceHistory", b =>
                {
                    b.HasOne("WIB.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WIB.Domain.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("WIB.Domain.Product", b =>
                {
                    b.HasOne("WIB.Domain.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("WIB.Domain.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("WIB.Domain.ProductAlias", b =>
                {
                    b.HasOne("WIB.Domain.Product", "Product")
                        .WithMany("Aliases")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WIB.Domain.Receipt", b =>
                {
                    b.HasOne("WIB.Domain.Store", "Store")
                        .WithMany("Receipts")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WIB.Domain.StoreLocation", "StoreLocation")
                        .WithMany()
                        .HasForeignKey("StoreLocationId");

                    b.Navigation("Store");

                    b.Navigation("StoreLocation");
                });

            modelBuilder.Entity("WIB.Domain.ReceiptLine", b =>
                {
                    b.HasOne("WIB.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("WIB.Domain.Receipt", "Receipt")
                        .WithMany("Lines")
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("WIB.Domain.StoreLocation", b =>
                {
                    b.HasOne("WIB.Domain.Store", "Store")
                        .WithMany("Locations")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("WIB.Domain.Category", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("WIB.Domain.Product", b =>
                {
                    b.Navigation("Aliases");
                });

            modelBuilder.Entity("WIB.Domain.Receipt", b =>
                {
                    b.Navigation("Lines");
                });

            modelBuilder.Entity("WIB.Domain.Store", b =>
                {
                    b.Navigation("Locations");

                    b.Navigation("Receipts");
                });
#pragma warning restore 612, 618
        }
    }
}
